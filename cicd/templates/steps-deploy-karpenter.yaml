steps:
  # Install Helm
  - task: HelmInstaller@0
    displayName: 'Install Helm'
    inputs:
      helmVersion: '3.x'

  # deploy karpenter node role
  - task: AWSShellScript@1
    displayName: 'KarpenterNodeRole'
    inputs:
      awsCredentials: '$(awsConnection)'
      regionName: '$(region)'
      scriptType: 'inline'
      inlineScript: |
        set -ex
        # Update kubeconfig
        aws eks --region $(region) update-kubeconfig --name $(clusterName)
        
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        KARPENTER_IAM_ROLE_NAME="KarpenterNodeRole-$(clusterName)"
        
        # Create IAM role and instance profile
        aws iam create-role \
          --role-name "${KARPENTER_IAM_ROLE_NAME}" \
          --assume-role-policy-document file://$(System.DefaultWorkingDirectory)/cicd/templates/karpenter-node-role-trust-policy.json
        
        aws iam attach-role-policy \
          --role-name "${KARPENTER_IAM_ROLE_NAME}" \
          --policy-arn arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        
        aws iam attach-role-policy \
          --role-name "${KARPENTER_IAM_ROLE_NAME}" \
          --policy-arn arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        
        aws iam attach-role-policy \
          --role-name "${KARPENTER_IAM_ROLE_NAME}" \
          --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        
        aws iam attach-role-policy \
          --role-name "${KARPENTER_IAM_ROLE_NAME}" \
          --policy-arn arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

#deploying karpenter controller role
  - task: AWSShellScript@1
  displayName: 'KarpenterControllerRole'
  inputs:
    awsCredentials: '$(awsConnection)'
    regionName: '$(region)'
    scriptType: 'inline'
    inlineScript: |
      set -ex
      # Update kubeconfig
      aws eks --region $(region) update-kubeconfig --name $(clusterName)

      AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      AWS_PARTITION=$(aws sts get-caller-identity --query Arn --output text | cut -d":" -f2)
      OIDC_ENDPOINT=$(aws eks describe-cluster --name $(clusterName) --query "cluster.identity.oidc.issuer" --output text)

      # Define the trust policy document for the Karpenter Controller role
      KARPENTER_CONTROLLER_TRUST_POLICY=$(cat <<EOF
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Federated": "${OIDC_ENDPOINT}"
            },
            "Action": "sts:AssumeRoleWithWebIdentity",
            "Condition": {
              "StringEquals": {
                "${OIDC_ENDPOINT}:sub": "system:serviceaccount:karpenter:karpenter"
              }
            }
          }
        ]
      }
      EOF
      )

      # Create the Karpenter Controller role with the trust policy
      aws iam create-role --role-name "KarpenterControllerRole-$(clusterName)" \
        --assume-role-policy-document "${KARPENTER_CONTROLLER_TRUST_POLICY}"

      # Define the inline policy document for Karpenter Controller role
      KARPENTER_CONTROLLER_POLICY=$(cat <<EOF
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "eks:DescribeCluster",
              "sts:AssumeRole"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceTypes",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeSubnets",
              "ec2:DescribeRouteTables",
              "ec2:DescribeVpcs",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeImages"
            ],
            "Resource": "*"
          }
        ]
      }
      EOF
      )

      # Attach the inline policy to the Karpenter Controller role
      aws iam put-role-policy --role-name "KarpenterControllerRole-$(clusterName)" \
        --policy-name "KarpenterControllerPolicy" \
        --policy-document "${KARPENTER_CONTROLLER_POLICY}"

  # Install Karpenter via Helm
  - task: AWSShellScript@1
    displayName: 'Deploy Karpenter'
    inputs:
      awsCredentials: '$(awsConnection)'
      regionName: '$(region)'
      scriptType: 'inline'
      inlineScript: |
        set -ex
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        AWS_DEFAULT_REGION=$(region)
        
        helm repo add karpenter https://charts.karpenter.sh/
        helm repo update
        
        helm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter \
          --version v0.32.1 \
          --namespace karpenter \
          --create-namespace \
          --set "settings.aws.clusterName=$(clusterName)" \
          --set "settings.aws.defaultInstanceProfile=KarpenterNodeInstanceProfile-$(clusterName)" \
          --set "serviceAccount.annotations.eks\.amazonaws\.com/role-arn=arn:aws:iam::${AWS_ACCOUNT_ID}:role/KarpenterControllerRole-$(clusterName)"

  # Create Karpenter Provisioner
  - task: AWSShellScript@1
    displayName: 'Configure Karpenter Provisioner'
    inputs:
      awsCredentials: '$(awsConnection)'
      regionName: '$(region)'
      scriptType: 'inline'
      inlineScript: |
        set -ex
        cat <<EOF | kubectl apply -f -
        apiVersion: karpenter.sh/v1beta1
        kind: Provisioner
        metadata:
          name: default
        spec:
          requirements:
            - key: karpenter.k8s.aws/instance-category
              operator: In
              values: ["c", "m", "r"]
            - key: karpenter.k8s.aws/instance-generation
              operator: In
              values: ["5", "6"]
          limits:
            resources:
              cpu: 1000
          providerRef:
            name: default
        ---
        apiVersion: karpenter.k8s.aws/v1beta1
        kind: AWSNodeTemplate
        metadata:
          name: default
        spec:
          subnetSelector:
            karpenter.sh/discovery: "$(clusterName)"
          securityGroupSelector:
            karpenter.sh/discovery: "$(clusterName)"
        EOF